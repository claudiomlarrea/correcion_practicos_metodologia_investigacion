import io
import re
import json
import smtplib, ssl
from email.message import EmailMessage

import streamlit as st
import pandas as pd

# Lectura de documentos
from docx import Document as DocxDocument
from pdfminer.high_level import extract_text as pdf_extract_text

# =============== Configuraci√≥n ===============
st.set_page_config(page_title="Auto-correcci√≥n de Pr√°cticos", page_icon="üìù", layout="centered")
st.title("üìù Auto-correcci√≥n de Pr√°cticos")
st.caption(
    "Suba su archivo, elija el pr√°ctico y escriba **Nombre y Apellido** y el **correo** del alumno. "
    "La app devuelve puntaje por criterios y env√≠a la devoluci√≥n al alumno y a la c√°tedra."
)

# =============== Lista de pr√°cticos (extendida + din√°mica) ===============
# Base que viste en tu app; pod√©s sumar m√°s con Secrets/CSV/textarea sin tocar c√≥digo.
PRACTICOS_BASE = [
    "Pr√°ctico N¬∞ 1 ‚Äî IA en la escritura del proyecto",
    "Pr√°ctico N¬∞ 1 ‚Äî IA en la escritura del proyecto (variante)",
    "Pr√°ctico N¬∞ 2 ‚Äî Establecimiento de M√©todos de Recolecci√≥n de Datos y Tipos de Muestreos. Tama√±o de muestra",
    "Pr√°ctico N¬∞ 3 ‚Äî Operacionalizaci√≥n de Variables y Determinaci√≥n de M√©todos de An√°lisis de Datos",
    "Pr√°ctico N¬∞ 4 ‚Äî Introducci√≥n + Marco te√≥rico + B√∫squeda (‚âà500 palabras en total)",
    "Trabajo pr√°ctico M√≥dulo 5 ‚Äî Mendeley: citas en Word y bibliograf√≠a",
    "Trabajo pr√°ctico M√≥dulo 6 ‚Äî Estilos de Word e √≠ndice autom√°tico",
    "Pr√°ctico N¬∞ 7 ‚Äî An√°lisis cuantitativo",
    "Pr√°ctico N¬∞ 8 ‚Äî An√°lisis cualitativo",
]

with st.expander("‚öôÔ∏è Configurar lista de pr√°cticos (opcional)"):
    st.write("La lista puede venir de **Secrets** (`PRACTICOS_JSON`), de un **CSV** (columna `practico`) o manual (uno por l√≠nea).")
    csv_practicos = st.file_uploader("CSV con columna 'practico' (opcional)", type=["csv"], key="csv_practicos")
    manual_practicos_text = st.text_area("Agregar pr√°cticos manualmente (uno por l√≠nea)", value="", height=120)

def cargar_practicos() -> list:
    merged = []
    # 1) Secrets JSON
    if "PRACTICOS_JSON" in st.secrets:
        try:
            data = json.loads(st.secrets["PRACTICOS_JSON"])
            if isinstance(data, list):
                for x in data:
                    s = str(x).strip()
                    if s and s not in merged:
                        merged.append(s)
        except Exception:
            pass
    # 2) CSV opcional
    if csv_practicos is not None:
        try:
            dfp = pd.read_csv(csv_practicos)
            if "practico" in dfp.columns:
                for x in dfp["practico"].dropna().tolist():
                    s = str(x).strip()
                    if s and s not in merged:
                        merged.append(s)
        except Exception:
            pass
    # 3) Manual (textarea)
    if manual_practicos_text.strip():
        for ln in manual_practicos_text.splitlines():
            s = ln.strip()
            if s and s not in merged:
                merged.append(s)
    # 4) Base por defecto
    for s in PRACTICOS_BASE:
        if s not in merged:
            merged.append(s)
    return merged

PRACTICOS = cargar_practicos()

# =============== Criterios (misma r√∫brica) ===============
CRITERIOS = [
    ("Tema y T√≠tulo", 20, [r"\btema\b", r"\bt[i√≠]tulo\b"]),
    ("Paradigma", 15, [r"\bparadigma\b"]),
    ("Pregunta de investigaci√≥n", 20, [r"\bpregunta de investigaci[o√≥]n\b", r"\bpregunta problema\b"]),
    ("Objetivos", 30, [r"\bobjetivo(s)?\b", r"\bobjetivo general\b", r"\bobjetivos espec[√≠i]ficos\b"]),
    ("Hip√≥tesis (si corresponde)", 15, [r"\bhip[o√≥]tesis\b"]),
]
TOTAL_MAX = sum(p for _, p, _ in CRITERIOS)

# =============== Entradas ===============
alumno_nombre = st.text_input("Nombre y apellido del alumno", placeholder="Ej.: Ana Mar√≠a P√©rez")
alumno_email  = st.text_input("Correo electr√≥nico del alumno", placeholder="nombre@uccuyo.edu.ar")
practico      = st.selectbox("Pr√°ctico", PRACTICOS or ["(defin√≠ la lista en el panel de configuraci√≥n)"])
archivo       = st.file_uploader("Subir archivo (.docx o .pdf)", type=["docx", "pdf"])

# =============== Bot√≥n principal ===============
if st.button("Corregir y Enviar"):
    # Validaciones m√≠nimas
    if not alumno_nombre.strip():
        st.warning("Por favor, complet√° **Nombre y apellido del alumno**.")
        st.stop()
    if not alumno_email.strip():
        st.warning("Por favor, ingres√° el **correo** del alumno.")
        st.stop()
    if not archivo:
        st.warning("Sub√≠ el archivo (.docx o .pdf).")
        st.stop()
    if not PRACTICOS:
        st.warning("Defin√≠ al menos un pr√°ctico.")
        st.stop()

    # =============== Lectura del archivo ===============
    texto = ""
    try:
        if archivo.name.lower().endswith(".docx"):
            with io.BytesIO(archivo.read()) as bio:
                doc = DocxDocument(bio)
                texto = "\n".join(p.text for p in doc.paragraphs)
        elif archivo.name.lower().endswith(".pdf"):
            with io.BytesIO(archivo.read()) as bio:
                texto = pdf_extract_text(bio)
        else:
            st.error("Formato no soportado.")
            st.stop()
    except Exception as e:
        st.error(f"No se pudo leer el archivo: {e}")
        st.stop()

    text_lc = texto.lower()

    # =============== Valoraci√≥n simple por criterios ===============
    desglose = []
    puntaje_total = 0
    explicaciones = []
    for nombre, puntaje_max, patrones in CRITERIOS:
        hallado = any(re.search(pat, text_lc, flags=re.IGNORECASE) for pat in patrones)
        puntos = puntaje_max if hallado else 0
        puntaje_total += puntos
        exp = f"Incluye {nombre.lower()}." if hallado else f"No se identific√≥ {nombre.lower()}."
        desglose.append((nombre, puntos, puntaje_max, exp))
        explicaciones.append(f"- {nombre}: {puntos}/{puntaje_max}. {exp}")

    puntaje_total = min(puntaje_total, TOTAL_MAX)

    # =============== Mensaje de devoluci√≥n (preview) ===============
    desglose_por_criterios = "\n".join(explicaciones)
    comentarios_generales = "Se evalu√≥ la presencia de secciones fundamentales de un anteproyecto."

    mensaje_preview = f"""Resultado de la correcci√≥n autom√°tica:

ALUMNO/A: {alumno_nombre}
{practico}
Puntaje: {puntaje_total}/{TOTAL_MAX}

Desglose por criterios:
{desglose_por_criterios}

Comentarios generales:
{comentarios_generales}
"""

    st.success("‚úîÔ∏è Corregido y enviado al correo del alumno.")
    st.text_area("Mensaje enviado:", mensaje_preview, height=420)

    # =============== Env√≠o de correos (SMTP) ===============
    # Configur√° estos secrets en Streamlit Cloud > Settings > Secrets
    SMTP_HOST     = st.secrets.get("SMTP_HOST", "")
    SMTP_PORT     = int(st.secrets.get("SMTP_PORT", 465))
    SMTP_USER     = st.secrets.get("SMTP_USER", "")
    SMTP_PASS     = st.secrets.get("SMTP_PASS", "")
    SENDER_EMAIL  = st.secrets.get("SENDER_EMAIL", "")
    # Si no defin√≠s EMAIL_CATEDRA en secrets, usa SIEMPRE esta casilla:
    EMAIL_CATEDRA = st.secrets.get("EMAIL_CATEDRA", "investigacion@uccuyo.edu.ar")

    if not all([SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, SENDER_EMAIL]):
        st.warning("‚ö†Ô∏è Falta configurar credenciales SMTP en **st.secrets**. Abajo pod√©s descargar el mensaje en TXT.")
    else:
        def enviar(destinatario: str, incluir_correo_alumno: bool = False):
            subject = f"Resultado ‚Äî {practico} ¬∑ {alumno_nombre}"

            # Para tu copia agregamos expl√≠citamente el correo del alumno al inicio del cuerpo
            body = mensaje_preview
            if incluir_correo_alumno:
                body = f"Correo del alumno: {alumno_email}\n\n" + body

            msg = EmailMessage()
            msg["Subject"] = subject
            msg["From"] = SENDER_EMAIL
            msg["To"] = destinatario
            msg.set_content(body)

            ctx = ssl.create_default_context()
            with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT, context=ctx) as server:
                server.login(SMTP_USER, SMTP_PASS)
                server.send_message(msg)

        try:
            enviar(alumno_email)                                # al alumno
            enviar(EMAIL_CATEDRA, incluir_correo_alumno=True)   # SIEMPRE a tu casilla, con la l√≠nea "Correo del alumno: ..."
        except Exception as e:
            st.warning(f"No se pudo enviar el correo autom√°ticamente: {e}")

    # =============== Descarga local del resultado (TXT) ===============
    nombre_txt = f"Devolucion_{alumno_nombre.replace(' ', '_')}.txt"
    st.download_button(
        "‚¨áÔ∏è Descargar devoluci√≥n (TXT)",
        data=mensaje_preview.encode("utf-8"),
        file_name=nombre_txt,
        mime="text/plain"
    )

    # Tabla de desglose (visual)
    df_desglose = pd.DataFrame([
        {"Criterio": n, "Puntos": p, "M√°ximo": m, "Explicaci√≥n": e}
        for (n, p, m, e) in desglose
    ])
    st.subheader("Desglose por criterios")
    st.dataframe(df_desglose, use_container_width=True)
